<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
    <title>6.813 - CandyCrush</title>
    <meta name="read-only" content="true">
    <meta http-equiv="content-type" content="text/html; charset=ISO-8859-1">
    <meta name="author" content="none">
    <style>

      .flush-right 
	  {
      	position:   relative;
      	float:      right;
      	margin:     1em;
      	margin-top:     0;
      	margin-bottom:  3em;
      }

      .center-final 
	  {
      	position:   relative;
      	margin:     1em;
      	margin-top:     0;
      	margin-bottom:  3em;
      	text-align: center;
      }

      div.caption 
	  {
     	font-style: italic;
      	text-align: center;
      }

      .flush-right > img
	  {
      	border: thin solid #a0a0a0;
      }
      .center-final > img
	  {
      	border: thin solid #a0a0a0;
      }

      p.due-info
	  {
      	border: 1px solid rgb(160, 159, 129);
      	padding: 0.5em 1em;
      	background: rgb(250, 255, 226) none repeat scroll 0% 0%;
      }

      span.html-tag 
	  {
      	font-family: monospace;
      	font-size: smaller;
      }

    </style>
</head>

<body>
	<header>6.813 - CandyCrush</header>
    <nav class="table-of-contents"></nav>
    
    <main>
        <div class="col-sm-10 col-sm-offset-2">
<!--E:H-->
    <div id="content-box">

        <p class="due-info">
           Due at 11:59pm, Wednesday, March 9, 2016
           by uploading submission to <a href="https://stellar.mit.edu/S/course/6/sp16/6.813/homework/assignment3/">Stellar</a>.<br>
           You must complete the <a
               href="https://courses.csail.mit.edu/6.005/form/form.py?formkey=1ffdzpKXqfhOBy3XgcJLpuAOS01lvg8S_rYVClQRpamE">self-assessment form</a> before you hand in the assignment. <br>
           You should make sure that your problem set renders correctly on Chrome (which we'll be using for evaluating your projects) and in either Firefox or Safari.
        </p>

        <p>This assignment explores the following topics related to GUI output:
            <ul>
                <li>the object approach;</li>
                <li>the stroke approach (also called vector graphics);</li>
                <li>the pixel approach;</li>
                <li>handling events sent from a model to a view.
                </li>
            </ul>
        </p>
        <b>You should make sure that your problem set renders correctly on Chrome (which we'll be using for evaluating it) and in either Firefox or Safari.</b>
        <h2>Overview</h2>
        <p>
            In this problem set, you will implement a browser-based view of <a href="http://en.wikipedia.org/wiki/English_draughts"><strong>Checkers</strong></a>,
            a two-player game. You don't have to implement the rules, since we provide an implemented model that includes the rules as methods you can call.  But in case you haven't played the game before, the rules are summarized as follows:
            <ul>
              <li>Each player starts with their pieces lined up on the two rows closest to their own side.</li>
              <li>Players play from opposite ends of the board, and take turns moving pieces diagonally-forward from one square to another.</li>
              <li>A turn consists of moving one piece diagonally-forward to an adjacent unoccupied square.</li>
              <li>If one player's piece, the opponent's piece, and an empty square are lined up, then the first player can "jump" the other player's piece. In this case, the first player jumps over the other player's piece onto the empty square and takes the other player's piece off the board. Multiple sequential jumps by one piece are allowed on a single turn.</li>
              <li>If a player's piece moves into the last row on the opposite side, it becomes a king piece, and can now move forward or backward.</li>
              <li>The game ends when a player loses all of their pieces, or is put in a position where they cannot move.
            </ul>
        </p>
        <p>
            You'll implement using a mix of component, stroke,
            and pixel techniques. In this problem set, you'll only be concerned with output.
            In the next problem set, you'll add input handling to your views, so that a user
            can click and drag checkers using the mouse.
        </p>

        <p>You may need to use HTML5 Canvas on this assignment, and these references may be helpful:
            <ul>
                <li><a href="http://crowdy.juhokim.com/play/32/">HTML5 Canvas: Introduction</a></li>
                <li><a href="http://crowdy.juhokim.com/play/33/">HTML5 Canvas: Draw Lines and Filled Shapes</a></li>
                <li><a href="http://crowdy.juhokim.com/play/34/">HTML5 Canvas: Animation Basics</a></li>
                <li><a href="https://developer.mozilla.org/en/Canvas_tutorial">Mozilla Canvas Tutorial</a>
            </ul>
        </p>
        <p>
        If you want to review HTML/CSS/Javascript/jQuery/jQueryUI, here are useful <a href="http://crowdy.juhokim.com/">video tutorials</a> picked by the course staff:
        <ul>
          <li><a href="http://crowdy.juhokim.com/play/22/">HTML Tables and Layouts</a></li>
          <li><a href="http://crowdy.juhokim.com/play/26/">HTML Forms</a></li>
          <li><a href="http://crowdy.juhokim.com/play/25/">Introduction to Styling with CSS</a></li>
          <li><a href="http://crowdy.juhokim.com/play/23/">CSS Absolute and Relative Positioning Tutorial</a></li>
          <li><a href="http://crowdy.juhokim.com/play/24/">Making Divs Side by Side Using CSS</a></li>
          <li><a href="http://crowdy.juhokim.com/play/27/">jQuery - Introduction to Selectors</a></li>
          <li><a href="http://crowdy.juhokim.com/play/28/">jQuery - ID Selector</a></li>
          <li><a href="http://crowdy.juhokim.com/play/29/">jQuery - Click Event Handler</a></li>
          <li><a href="http://crowdy.juhokim.com/play/30/">jQuery - addClass()</a></li>
          <li><a href="http://crowdy.juhokim.com/play/31/">jQuery UI Datepicker</a></li>
        </ul>
        </p>
        <img src="ps2-new-game.png" class="flush-right" border="1"/>
        <h2>Provided Resources</h2>
        <p>We provide you with a lot of existing code for this assignment. You can get
            it all at once here:
            <ul>
                <li><a href="ps2.zip">ps2.zip</a>: a zip file containing a main
				page, stylesheet and javascript libraries
                    for this problem set.</li>
            </ul>

        <p>In the root folder of the project are:
          <ul>
              <li>the following files:
                  <ul>
                      <li><strong>board.js</strong>: a javascript file containing the Board class</li>
                      <li><strong>boardEvent.js</strong>: a javascript file containing the BoardEvent class</li>
                      <li><strong>checker.js</strong>: a javascript file containing the Checker class</li>
                      <li><strong>index.html:</strong>: a skeleton file for your user interface</li>
                      <li><strong>mainLayout.css</strong>: a stylesheet file for index.html</li>
                       <li><strong>rules.js</strong>: a javascript file containing classes for Checker game rules</li>
                  </ul>
              </li>
              <li>the following folders:
                  <ul>
                      <li><strong>graphics</strong>: a folder containing all the graphics files </li>
                      <li><strong>external_js</strong>: a folder for external JavaScript libraries (contains jQuery) </li>
                  </ul>
              </li>
          </ul>
        </p>

        <p>The javascript board model actually has pieces on it, but you won't see them until you've
            implemented the pieces display.</p>

        <h2>Problem 1: Board (30%)</h2>
        <p>Fill in the skeleton of index.html so that it displays a 400x400-pixel
		checkerboard.  The upper left square should be white. The number of squares
		across the board should be dynamically determined by the <code>BOARD_SIZE</code> variable in the
		code.  This size defaults to 8x8, but you can change it to any value <em>n</em> by adding <code>?size=<em>n</em></code> to
		the end of the URL, e.g. <code>index.html?size=16</code>.  No matter how many squares are in the
		checkerboard, it should always be 400x400 pixels. Don't worry too much about odd board sizes.
		</p>

		<p>You can use either canvas (the stroke approach) or HTML elements (the object approach) to solve
		this problem.</p>

        <h2>Problem 2: Checkers (40%)</h2>
        <p>
	  Display all the checkers on
          the board <b>using HTML elements</b> (the object approach). Four pictures are provided for you (red-piece.png,
	  black-piece.png, red-king.png, and black-king.png, found in the graphics
	  folder). Please don't replace them with different pictures.
	</p>

	<p>
	  Be sure that as the board scales to different sizes, so do
	  the checkers. They should also be centered on their
	  respective squares regardless of board size.

	</p>

	<p>
	  Your view must update when the board changes so that it displays the
          current state of the board at all times. You can test this
          by clicking on <strong>Auto Move</strong>, which produces legal board moves in the model, and <strong>New Game</strong>.
    </p>
    <p>
          Black and red should take turns to make a move. As such, you will need to update and keep track of whose turn it is to move. Add a visual cue regarding the respective turns to move above the buttons. Ensure you update the text (e.g. from "Black Turn" to "Red Turn") and background color of the visual cue based on whose turn it is.
          Remember, black moves first.
        </p>

        <h2>Problem 3: Move Feedback (30%)</h2>

        <p>When a checker moves from one place to another, draw a
        yellow arrow from the center of its old square to the center
        of its new square, appearing above all checkers.  In the case
        of a double jump, you only need to draw one arrow from the
        starting square to the ending square. This arrow should
        persist until the next change to the board. If you are having
        problems thinking about how to draw an arrow, take a look at
        Exercise 4 of the <a href="http://courses.csail.mit.edu/6.831/2015/handouts/lab2-javascript-jquery/lab2.shtml">Javascript/jQuery tutorial</a></p>

        <h2>Going Further</h2>
        <p>If you found this assignment easy and you're inclined to go further, try the following:
        <ul>
        <li>Animate checkers when they move
        <li>Draw the checkerboard in perspective, so that it's more obvious to the user which side they're playing.
        </ul>

        <h2>What to Hand In</h2>
        <p>You must complete the <a
            href="https://courses.csail.mit.edu/6.005/form/form.py?formkey=1ffdzpKXqfhOBy3XgcJLpuAOS01lvg8S_rYVClQRpamE">self-assessment form</a> before you hand in the assignment.
<p>Package your completed assignment as a zip file that contains all of your
files (including <b>all</b> necessary external libraries). <b>Failure to include all necessary files for running your program will result in a loss of points from your final grade.</b>
    (Please test by unzipping your zip file into, say, your /tmp
    directory, turning off your Internet connection, and then
    opening your page to see if it still works.)
</p>
 <p>List your collaborators in the comment at the top of index.html, <b>or explicitly say that you discussed the assignment with nobody</b>.
Collaborators are any people you discussed this assignment with. This is an
individual assignment, so be aware of the course's
           <a href="http://web.mit.edu/6.813/www/sp16/general/#collaboration">collaboration policy</a>. 
</p>
<p>Here's a checklist of things you should confirm before you hand in: </p>
<ol>
  <li>Complete the self assessment.</li>
  <li>Make sure your collaborators are named in index.html.</li>
  <li>Make sure that the page renders correctly on Chrome (which we'll be using for evaluating your projects) and in either Firefox or Safari.</li>
  <li>Make a fresh folder and unpack your zip file into it.</li>
  <li>Make sure all assets (images, jQuery source, JS files, CSS files, etc.) used by your code are found in the fresh folder and load successfully.</li>
</ol>
<p>Submit your zip file on <a href="https://stellar.mit.edu/S/course/6/sp16/6.813/homework/assignment3/">Stellar</a>. </p>

    </div>
</div>

<!--S:F-->
</main>
    <footer>MIT EECS</footer>
    <script src="js/handout-render.js"></script>
<!--E:F--> 
</body>

</html>
